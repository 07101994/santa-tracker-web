$name: 'module-dorf';

@import "../shared/sass/_mixins.scss";

@import "sass/variables";
@import "sass/animations";

##{$name} {
  background: #F5F2E2;
  height: 100%;
  position: relative;
  min-width: 320px;  // force 320px min width, i.e., iPhone 4/5+
  overflow: hidden;

  #drawer {
    .cards {
      border-bottom: 4px solid #eee;
    }

    button#close-sidebar {
      pointer-events: auto;
      border: 0;
      margin: 0;
      padding: 0;
      text-align: center;
      background: transparent;
      cursor: pointer;
      display: block;
      height: 75px;
      line-height: 75px;
      text-align: left;
      font-family: 'Lobster';
      font-size: 30px;
      padding-left: 68px;
      width: 100%;
      color: #ccc;
    }

    .menucard {
      box-sizing: border-box;
      height: 150px;
      background: transparent center right no-repeat;
      background-size: cover;
      padding: 12px 12px 12px 68px;
    }

    a {
      color: white;
      text-decoration: none;
    }

    h2 {
      font-size: 1em;
      letter-spacing: 1px;
      font-weight: 500;
      color: #fff;
      margin: 6px 0;
      line-height: 12px;
      text-transform: uppercase;
    }
    h4 {
      margin: 0;
      padding-top: 0.25em;
      font-size: 2.875em;
      line-height: 1.5em;
      text-shadow: 0 2px 0 rgba(0, 0, 0, 0.25);
    }
  }

  .scroll {
    overflow-y: auto;

    // Force a layer on this scroll element.
    transform: translateZ(0);
    will-change: transform;
  }

  header {
    // NOTE: This is intentionally not position: relative (or absolute, ...)
    // so that we don't create a new z-index heirarchy. Conveniently, the
    // <header> element is always shown at 0,0, so positioning is still easy.
    height: 385px;
    background: #47c6ee;
    background: linear-gradient(to bottom, rgba(61,218,242,1) 0%, rgba(140,232,248,1) 86%, rgba(153,234,249,1) 100%);
    z-index: 1;
    overflow: visible;

    // By default, there's nothing user-interactable here.
    // TODO(samthor): This is unsupported on IE10. So, the effect/text layer
    // that overlaps the village will cause that overlapping area to be
    // unreachable.
    pointer-events: none;

    #header-background {
      z-index: $base-background-z-index;
      height: 665px;
      background-image: url(img/header-bg.svg);
      background-repeat: repeat-x;
      background-position: 50% 100%;
      background-size: 1618px 791px;
      position: absolute;
      width: 100%;
    }

    /** Contains all effects, like snow, the airplane etc. */
    #header-skyeffect {
      z-index: $base-raised-z-index;
      position: absolute;
      width: 100%;
      height: 630px;
      overflow: hidden;

      > * {
        display: inline-block;
        position: absolute;
      }

      .shimmy {
        animation: #{$name}-shimmy 15s infinite ease-in-out;
      }
      .fall {
        opacity: 0;  // this will be overwritten by animation
        animation: #{$name}-fall 35s infinite linear;
      }
      .snow {
        position: absolute;
        width: 16px;
      }
      .snow::before {
        content: "";
        float: left;
        width: 100%;
        padding-top: 100%;
        margin-left: -50%;
        background: white;
        border-radius: 10000px;
      }
      .plane {
        position: absolute;
        top: 32px;
        width: 171px;
        height: 82px;
        margin-left: -(171px/2);
        background: url(img/plane.svg) center no-repeat;
        // this only animates across the screen for <10% of the time
        animation: #{$name}-plane 75s infinite linear;
      }
      .cloud {
        opacity: 0;  // this will be overwritten by animation
        position: absolute;
        width: 113px;
        height: 68px;
        margin-left: -(113px/2);
        background: url(img/cloud-big_2x.png) center no-repeat;
        background-size: contain;
        // this only animates across the screen for <10% of the time
        animation: #{$name}-cloud 25s infinite linear;
      }
      .skydive {
        animation: #{$name}-skydive 40s infinite ease-in;
        margin-left: calc(50% + 120px);

        > span {
          position: absolute;
          background-position: center;
          background-repeat: no-repeat;
          background-size: contain;
          transform: translate(-50%, -50%);  // center span
          animation-duration: inherit;
          animation-iteration-count: infinite;
        }

        .pegman-1 {
          width: 60px;
          height: 60px;
          background-image: url(img/pegman-dive.svg);
          animation-name: #{$name}-skydive-pegman-1;
        }
        .pegman-2 {
          margin-top: -7px;
          width: 112px;
          height: 112px;
          background-image: url(img/pegman-chute.svg);
          animation-name: #{$name}-skydive-pegman-2;
        }
        .pegman-3 {
          margin-left: 61px;
          margin-top: 24px;
          width: 140px;
          height: 140px;
          background-image: url(img/pegman-land.svg);
          animation-name: #{$name}-skydive-pegman-3;
        }
      }
    }

    #header-content {
      z-index: $base-raised-z-index;
      position: absolute;
      width: 100%;
      height: 630px;
      text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);

      display: flex;
      justify-content: flex-start;
      align-items: center;
      text-align: center;
      flex-direction: column;
      position: relative;

      // TODO(samthor): Give this a layer, as it extends over its neighbour
      // to the south, and Chrome is confused when painting.
      transform: translateZ(0);
      will-change: transform;

      #count-down {
        padding: 45px 0 30px 0;
      }

      // NOTE: This is used for the countdown timer.
      h2 {
        font-size: 12px;
        letter-spacing: 1px;
        font-weight: 500;
        color: #fff;
        margin: 6px 0;
        line-height: 12px;
        text-transform: uppercase;
      }

      h1 {
        margin: 0;
        font-family: 'Lobster', sans-serif;
        will-change: transform;
        font-size: 62px;
        line-height: 50px;
        color: white;
        text-shadow: 0 2px 0 rgba(0, 0, 0, 0.25);
        transform: rotateZ(-3deg);
      }

      p {
        margin: 50px 0 0 0;
        color: #fff;
        text-align: center;
        font-weight: 400;
        font-size: 22px;
        line-height: 26px;
        max-width: 360px;
      }

      /** Make header elements small on mobile */
      @media (max-width: $width-twocol) {
        h1 {
          font-size: 44px;
          line-height: 36px;
        }
        h2 {
          font-size: 10px;
          line-height: 10px;
        }
        p {
          font-size: 16px;
          max-width: 260px;
          margin-top: 36px;
          padding-bottom: 4px;
        }
      }
    }
  }

  /** House data */
  @import "sass/houses";

  /** Village flexbox */
  #village-all {
    z-index: $base-background-z-index;
    position: relative;  // nb. creates a z-index layer for children
    overflow: hidden;
    padding-bottom: 300px;

    // Move the village up by 30px, but give the layer an extra 30px to work
    // with: this gives space for the hover cards.
    margin-top: -60px;
    padding-top: 30px;

    @import "sass/eastereggs";

    #houses {
      position: relative;
      display: flex;
      flex-flow: wrap;
    }
  }

  .house {
    position: relative;

    /** Common card styling */
    .link {
      color: white;
      text-decoration: none;
      text-align: center;

      .card {
        width: 100%;
        height: 100%;
        position: absolute;
        color: white;

        .image {
          width: 100%;
          height: 100%;
          position: absolute;
          z-index: -1;  // behind text
        }

        .launchdate {
          font-family: 'Lobster', sans-serif;
          font-size: 1.5em;
          line-height: 1.4em;
          padding-top: 0.25em;
          text-shadow: 0 1px 0 rgba(0, 0, 0, 0.5);
        }
        h4 {
          margin: 0;
          padding-top: 0.25em;
          font-family: 'Lobster', sans-serif;
          font-size: 2.875em;
          line-height: 1.5em;
          text-shadow: 0 2px 0 rgba(0, 0, 0, 0.25);
          transform: rotateZ(-3deg);
        }
        h3 {
          margin: 0;
          font-size: 1em;
          line-height: 1.5em;
          text-shadow: 0 1px 0 rgba(0, 0, 0, 0.5);
        }
      }
    }
  }

  #village-footer {
    z-index: $base-background-z-index;
    height: 700px;
    background-image: url(img/footer-bg.svg);
    background-repeat: repeat-x;
    background-position: 50% 0;
    background-size: 1882px 1116px;
    position: relative;
    top: -290px;
    margin-bottom: -290px;

    // TODO(samthor): Give this a layer, as it extends over its neighbour
    // to the north, and Chrome is confused when painting.
    transform: translateZ(0);
    will-change: transform;

    #village-footer-elves {
      background-image: url(img/footer-elves.svg);
      background-repeat: no-repeat;
      background-position: 50% 0;
      background-size: 1790px 700px;
      position: absolute;
      width: 100%;
      height: 100%;
    }
  }

  /** Tablet/desktop specific styles. */
  @media (min-width: $width-tablet) {
    font-size: 16px;

    #village-all {
      #houses {
        align-items: flex-start;
        margin: 0 auto;
        width: $width-desktop;
        height: $height-desktop;
        z-index: 10;
      }

      #ground {
        z-index: 1;
        position: absolute;
        background-image: url(img/ground.svg);
        background-repeat: repeat-x;
        background-size: $ground-size-w $ground-size-h;
        background-position: 50% 0;
        width: 100%;
        height: 100%;
        top: $ground-top + 30px;
      }

      #road {
        position: absolute;
        z-index: 2;
        background-image: url(img/road.svg);
        background-repeat: no-repeat;
        background-position: 50% 0;
        background-size: $road-size-w $road-size-h;
        width: 100%;
        height: 100%;
        top: $road-top + 30px;;
      }

      .house {
        position: relative;
        width: $dim-house;
        height: $dim-house;

        .assets {
          .ice {
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s ease-out;
            will-change: none;  // don't create a layer; this only transitions once
          }

          .launchdate {
            pointer-events: none;
            user-select: none;
            position: absolute;
            background: url(img/number-bg.svg) center no-repeat;
            background-size: contain;
            transform: translate(-50%, -50%);
            width: 1.6em;
            height: 1.6em;
            font-family: "Lobster";
            font-size: 2.5em;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
          }
        }

        &.iced {
          .assets {
            .building {
              a, h3 {
                display: none;
              }
            }
            .ice {
              opacity: 1;
            }
          }
          h5 {
            display: none;
          }
        }
      }  // .house
    }

    .assets {
      // This is the same size as its parent, but ties in with _houses setting
      // z-index here. This ensures that building/ice is layered correctly with
      // other village things like easter eggs.
      position: absolute;
      width: 100%;
      height: 100%;
    }

    /**
     * Each house's action is basically positioned at its center bottom point,
     * something like its door. The label, e.g. "Play", "Learn" etc is shown
     * just under this point. It provides the base for a touch area.
     */
    .action {
      position: absolute;
      width: 50%;
      height: 50%;  // this extends below the label, .link is this size but above
      margin-bottom: -50%;
      margin-left: -25%;

      h5 {
        margin: 0;
        font-size: 12px;
        letter-spacing: 1px;
        font-weight: 600;
        color: #fff;
        line-height: 12px;
        text-transform: uppercase;
        text-align: center;
        color: #37afdb;
        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.125);
        position: relative;  // so .housez class can take effect
      }

      .link {
        // TODO(samthor): Use sizing from _houses; just a quick hack for now.
        // Restore layerX/layerY position.
        width: 100%;
        height: 100%;
        left: 0%;
        bottom: 100%;
        position: absolute;
        z-index: 30000;

        // Create a layer: this hints to browsers that yes, this card _REALLY IS_
        // above everything else. Since there's no background/color etc, it's
        // ignored anyway.
        transform: translateZ(0);
        will-change: transform;

        $duration-in: 0.4s;
        $easing-in: cubic-bezier(0.380, 0.800, 0.475, 1.285);
        $duration-out: 0.2s;
        $easing-out: ease-in;

        .card {
          $hs: $hover-card-size / 2;
          width: $hover-card-size !important;
          height: $hover-card-size !important;
          margin: (-$hs) 0 0 (-$hs);
          will-change: transform, opacity;
          border-radius: 10000px;
          overflow: hidden;
          transition: transform $duration-out $easing-out, opacity $duration-out $easing-out;
          transform: scale(0);
          opacity: 0.25;
          left: 50%;
          top: 50%;
          box-shadow: 4px 14px 0 rgba(0, 0, 0, .125);

          .launchdate {
            display: none;
          }
        }

        &:hover, &:active {
          .card {
            transition: transform $duration-in $easing-in, opacity $duration-in $easing-in;
            transform: scale(1);
            opacity: 1;
          }
        }
      }  // .link
    } // .action
  }

  /** Tablet village. Shrunk version of desktop. */
  @media (max-width: ($width-desktop - 1)) and (min-width: $width-tablet) {
    font-size: 12px;

    .link {
      .card {
        $hs: $hover-card-size * $tablet-desktop-ratio / 2;
        width: $hover-card-size * $tablet-desktop-ratio !important;
        height: $hover-card-size * $tablet-desktop-ratio !important;
        margin: (-$hs) 0 0 (-$hs);
      }
    }

    #village-all {
      #houses {
        width: $width-tablet;
        height: $height-tablet;
        .house {
          width: $dim-house * $tablet-desktop-ratio;
          height: $dim-house * $tablet-desktop-ratio;

          .building {
            a {
              img {
                width: $hover-card-size * $tablet-desktop-ratio;
                height: $hover-card-size * $tablet-desktop-ratio;
                margin: #{-$hover-card-size * $tablet-desktop-ratio}px 0 0 #{-$hover-card-size * $tablet-desktop-ratio}px;
              }
            }
          }
        }
      }

      #ground {
        background-size: ($ground-size-w * $tablet-desktop-ratio) ($ground-size-h * $tablet-desktop-ratio);
      }
      #road {
        background-size: ($road-size-w * $tablet-desktop-ratio) ($road-size-h * $tablet-desktop-ratio);
        top: $road-top * $svg-ratio;
      }
    }
  }

  /** All mobile villages (two cols) */
  @media (max-width: $width-tablet - 1) {
    font-size: 14px;

    #village-all {
      #houses {
        align-items: stretch;

        .house {
          width: 50%;
          height: $height-card-mobile;

          &[disabled] {
            display: none;  // don't display in flexbox at all
          }

          .assets {
            display: none;
          }

          &.iced {
            height: auto;
            min-height: $height-icedcard-mobile;

            .card {
              h3, h4 {
                display: none;
              }
            }

            // fade out iced cards
            &::after {
              z-index: 100;
              position: absolute;
              content: "";
              top: 0;
              left: 0;
              right: 0;
              bottom: 0;
              background: rgba(0, 0, 0, 0.5);
              pointer-events: none;
            }
          }
        }
      }

      #ground, #road, .easter-egg {
        display: none;
      }
    }
  }

  /** Mobile village (one col) */
  @media (max-width: $width-twocol) {
    #village-all {
      #houses {
        .house {
          width: 100%;
        }
      }
    }
  }
}